buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    mavenCentral()
    maven {
        name = "sonatype-oss-public"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

apply plugin: 'scala'
apply plugin: 'forge'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '0.3.0'
group = "de.mineformers" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mfcore"

def jarVersion = ""
project.displayVersion = ""
if (System.getenv("BUILD_NUMBER") != null) {
    if(System.getenv("BUILD_NUMBER").isInteger()) {
        jarVersion = ".${System.getenv("BUILD_NUMBER")}"
    }
    project.displayVersion = System.getenv("BUILD_NUMBER")
}

version = "$version$jarVersion"

minecraft {
    if (file("../run").exists()) {
        runDir = "../run"
    } else {
        runDir = "eclipse"
    }
    version = "1.7.10-10.13.1.1212-new"
}

configurations {
    provided
}

//Include provided for compilation
sourceSets.main.compileClasspath += configurations.provided

dependencies {
    provided 'com.nativelibs4java:scalaxy-loops_2.11:0.1.1'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "build", ext.displayVersion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info', 'version.properties'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'build': project.displayVersion
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info', 'version.properties'
    }
}

tasks.withType(JavaCompile) {
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
}

tasks.withType(ScalaCompile) {
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
    scalaCompileOptions.optimize = true
    scalaCompileOptions.additionalParameters = ['-Yclosure-elim', '-Yinline']
}

jar {
    classifier = 'universal'
    manifest {
        attributes 'FMLCorePlugin': 'de.mineformers.core.MFCore'
    }
}

// add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'src'
}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: scaladoc) {
    classifier = 'javadoc'
    from 'build/docs/scaladoc'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLCorePlugin': 'de.mineformers.core.MFCore'
    }
}

artifacts {
    archives sourceJar
    archives deobfJar
    archives javadocJar
}

uploadArchives {
    if (System.getenv("mavenUrl") != null) {
        repositories {
            logger.info('Publishing to files server')

            mavenDeployer {

                repository(url: System.getenv("mavenUrl")) {
                    authentication(userName: System.getenv("mavenUser"), password: System.getenv("mavenPassword"))
                }

                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'Core functionality for MineFormers mods'
                        url 'https://github.com/MineFormers/MFCore'

                        scm {
                            url 'https://github.com/MineFormers/MFCore'
                            connection 'scm:git:git://github.com/MineFormers/MFCore.git'
                            developerConnection 'scm:git:git@github.com:MineFormers/MFCore.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/MineFormers/MFCore/issues'
                        }

                        licenses {
                            license {
                                name 'MIT License'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'PaleoCrafter'
                                name 'Paleo Crafter'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}